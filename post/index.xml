<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://fujiten.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>youremail@domain.com (fujiten)</managingEditor>
    <webMaster>youremail@domain.com (fujiten)</webMaster>
    <lastBuildDate>Fri, 25 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fujiten.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Webアプリケーション バックエンド RESTfulAPI開発</title>
      <link>https://fujiten.github.io/post/2020-09-25-developing_api/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (fujiten)</author>
      <guid>https://fujiten.github.io/post/2020-09-25-developing_api/</guid>
      <description>実装  ルーティング リクエストパーサーによる値の受け取り ビジネスロジックの実装 値のバリデーション 値の永続化(DB保存) 値の返答(JSON)  一般公開向けのAPIでなく、SPAのための社内のみで使うRESTfulAPIなどは、フロントエンドエンジニアにとっては、「値とHTTPリクエストを送れば適切なJSONを返してくれ、データ永続化などに関してはうまくやっていてくれている」ものであることを望んでおり、そのことを踏まえて、大きく上のようにAPI実装に対して必要な事項をわけました。実際は、認証や、DB設計など、もう少し踏み込んだ部分についても設計の考慮が必要なので、そちらについてもこの記事で扱っていきたいとは思っていますが、まずは、「リクエストからレスポンスまで」の一連の流れをどのように扱っていくか、開発のさいに考慮すべきかという点についてを考えたいと思います。
ルーティング エンドポイントの設計と、あるエンドポイントに送られてきたHTTPリクエストを解釈し、必要なモジュール(コントローラ)に対して受け渡す責務を負います。
後者については、ほとんどのライブラリでサポートされているので、そのライブラリが求める実装に乗ればいいでしょう。Railsの場合は、route.rbにまとめて記載すると思われます。
重要なのは、やはり前者、エンドポイントの設計でしょう。基本的なものはRESTful通りに作ればいいでしょうが、「固有のユースケース」などに対しては、エンドポイントも固有に作成することで対応するのが自分はいいと思っています。
たとえば、ユーザー検索のエンドポイントは
GET /users/search?name=mike といったように、searchといった動詞をエンドポイントに含ませていいと思ってます。 また、社内用でもあるので、特定のエンドポイントが様々なユースケースに対応する形よりも、エンドポイント自体を多くしたほうが「現存のAPIでフロントが勝手なことしたからユーザーが消えちゃったよ！」みたいな事故が減る確率は上がるため、その点でもメリットが大きいです。 デメリットは、煩雑になることですかね。</description>
    </item>
    
    <item>
      <title>Webアプリケーション開発 懸念事項まとめ</title>
      <link>https://fujiten.github.io/post/2020-08-06/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (fujiten)</author>
      <guid>https://fujiten.github.io/post/2020-08-06/</guid>
      <description>懸念事項 中規模以上にスケールさせることを目的としたWebアプリケーションを開発するさい、ソフトウェアエンジニアとして考慮すべきことは多くある。
要件の定義、技術選定……といったこと。
そもそものビジネスのロジックや解決したい課題、つまりアプリケーションの要件が決まる前後で、プロジェクトのCTOが技術選定を行うことが一般的だ。どのような言語やライブラリやフレームワークを選択すべきか（そもそもフレームワークを使うべきか？）、サーバーを立ち上げるサービスはなににすべきか、などといったことだ。
これらの事項は、最初に挙げた要件を一番満たしやすいものを選ぶべき、という原則はあるにせよ、実際的には、チームのメンバーにとって「一番開発しやすいエコシステム」を中心として選ぶ事が多い。Railsを使えるメンバーが多ければ、開発したいアプリケーションの要件が多少RailsWayから外れていたとしても、Railsの選定は選択肢の一つとなりうるといった具合だ。
また、今後の採用のしやすさやチームの成長を見込んで、あえて枯れていないモダンな技術を選定するといった戦略もある。いずれにせよ、技術選定に絶対的な正解はなく、現在のチームの状況に大きく依存することは間違いない。
from datetime import datetime from src.database import db from flask_marshmallow import Marshmallow from flask_marshmallow.fields import fields ma = Marshmallow() class UserAccountModel(db.Model): __tablename__ = &amp;#39;user_accounts&amp;#39; user_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;users.id&amp;#39;), primary_key=True) account_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;accounts.id&amp;#39;), primary_key=True) class UserAccountSchema(ma.ModelSchema): class Meta: model = UserAccountModel createTime = fields.DateTime(&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;) updateTime = fields.DateTime(&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;) </description>
    </item>
    
    <item>
      <title>二度目の投稿!</title>
      <link>https://fujiten.github.io/post/2020-08-03-second-post/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (fujiten)</author>
      <guid>https://fujiten.github.io/post/2020-08-03-second-post/</guid>
      <description>二度目のテスト投稿 これがテストの記事です。
マークダウンエディタをVSCodeに入れて書いています。
from datetime import datetime from src.database import db from flask_marshmallow import Marshmallow from flask_marshmallow.fields import fields ma = Marshmallow() class UserAccountModel(db.Model): __tablename__ = &amp;#39;user_accounts&amp;#39; user_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;users.id&amp;#39;), primary_key=True) account_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;accounts.id&amp;#39;), primary_key=True) class UserAccountSchema(ma.ModelSchema): class Meta: model = UserAccountModel createTime = fields.DateTime(&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;) updateTime = fields.DateTime(&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;) </description>
    </item>
    
    <item>
      <title>最初の投稿!</title>
      <link>https://fujiten.github.io/post/2020-03-30-first-post/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (fujiten)</author>
      <guid>https://fujiten.github.io/post/2020-03-30-first-post/</guid>
      <description>テストの記事です これがテストの記事です。
マークダウンエディタをVSCodeに入れて書いています。
from datetime import datetime from src.database import db from flask_marshmallow import Marshmallow from flask_marshmallow.fields import fields ma = Marshmallow() class UserAccountModel(db.Model): __tablename__ = &amp;#39;user_accounts&amp;#39; user_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;users.id&amp;#39;), primary_key=True) account_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;accounts.id&amp;#39;), primary_key=True) class UserAccountSchema(ma.ModelSchema): class Meta: model = UserAccountModel createTime = fields.DateTime(&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;) updateTime = fields.DateTime(&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;) </description>
    </item>
    
  </channel>
</rss>